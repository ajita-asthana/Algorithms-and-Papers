# Interesting Graph Traversal Leetcode question 
# Problem number 802: Find Eventual Safe States 

# Solving using Kahn's algorithm and BFS 

1. A node is Eventual Safe node if it doesn't lead to a cycle 
2. Reverse the graph to find all nodes that eventually reach a terminal node 
3. Perform topological sort (BFS) to collect all safe nodes 

# Steps 
1. Reverse the graph 
2. Track indegrees 
3. All terminal nodes (node with no outgoing edges in original graph - no incoming edges in reversed graph) start the queue
4. Do BFS from these and reduce indegrees of neighbors 
5. Nodes whose indegree become 0 are safe 

from typing import List 
from collections import deque, defaultdict 

class Solution:
  def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
    n = len(graph)
    reverse_graph = defaultdict(list)
    indegree = [0] * n 

    for node in range(n):
      for outgoing_edge in graph[node]:
        reverse_graph[outgoing_edge].append(node)
        indegree[node] += 1

    q = deque()
    for i in range(n):
      if indegree[i] == 0:
        q.append(i)

    safe = []

    while q:
      node = q.popleft()
      safe.append(node)
      for nei in reverse_graph[nei]:
        indegree[nei] -= 1
        if indegree[nei] == 0:
          q.append(nei)


  return sorted(safe)


# Test Case 
# input 
graph = [[],[0,2,3,4],[3],[4],[]]

# output 
[0,1,2,3,4]


Original Graph (Forward Edges)
graph = [[],[0,2,3,4],[3],[4],[]]

Index: Node -> Outgoing Edges 
0 -> [] 
1 -> 0, 2, 3, 4
2 -> 3
3 -> 4
4 -> [] 

Reversed Graph 
0 <- 1
2 <- 1
3 <- 1, 2 
4 <- 1, 3 

So visually 
1 → 0   becomes   0 ← 1
1 → 2   becomes   2 ← 1
1 → 3   becomes   3 ← 1
1 → 4   becomes   4 ← 1
2 → 3   becomes   3 ← 2
3 → 4   becomes   4 ← 3


# Reverse Graph 
reverse_graph = {
    0: [1],
    2: [1],
    3: [1, 2],
    4: [1, 3]
}

